// -*- C++ -*-
//===--------------------------- cstdlib ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_CSTDLIB
#define _LIBCPP_CSTDLIB

/*
    cstdlib synopsis

Macros:

    EXIT_FAILURE
    EXIT_SUCCESS
    MB_CUR_MAX
    NULL
    RAND_MAX

namespace std
{

Types:

    size_t
    div_t
    ldiv_t
    lldiv_t                                                               // C99

double    atof (const char* nptr);
int       atoi (const char* nptr);
long      atol (const char* nptr);
long long atoll(const char* nptr);                                        // C99
double             strtod  (const char* restrict nptr, char** restrict endptr);
float              strtof  (const char* restrict nptr, char** restrict endptr); // C99
long double        strtold (const char* restrict nptr, char** restrict endptr); // C99
long               strtol  (const char* restrict nptr, char** restrict endptr, int base);
long long          strtoll (const char* restrict nptr, char** restrict endptr, int base); // C99
unsigned long      strtoul (const char* restrict nptr, char** restrict endptr, int base);
unsigned long long strtoull(const char* restrict nptr, char** restrict endptr, int base); // C99
int rand(void);
void srand(unsigned int seed);
void* calloc(size_t nmemb, size_t size);
void free(void* ptr);
void* malloc(size_t size);
void* realloc(void* ptr, size_t size);
void abort(void);
int atexit(void (*func)(void));
void exit(int status);
void _Exit(int status);
char* getenv(const char* name);
int system(const char* string);
void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
              int (*compar)(const void *, const void *));
void qsort(void* base, size_t nmemb, size_t size,
           int (*compar)(const void *, const void *));
int         abs(      int j);
long        abs(     long j);
long long   abs(long long j);                                             // C++0X
long       labs(     long j);
long long llabs(long long j);                                             // C99
div_t     div(      int numer,       int denom);
ldiv_t    div(     long numer,      long denom);
lldiv_t   div(long long numer, long long denom);                          // C++0X
ldiv_t   ldiv(     long numer,      long denom);
lldiv_t lldiv(long long numer, long long denom);                          // C99
int mblen(const char* s, size_t n);
int mbtowc(wchar_t* restrict pwc, const char* restrict s, size_t n);
int wctomb(char* s, wchar_t wchar);
size_t mbstowcs(wchar_t* restrict pwcs, const char* restrict s, size_t n);
size_t wcstombs(char* restrict s, const wchar_t* restrict pwcs, size_t n);
int at_quick_exit(void (*func)(void))                                     // C++11
void quick_exit(int status);                                              // C++11
void *aligned_alloc(size_t alignment, size_t size);                       // C11

}  // std

*/

#include <__config>
#include <stdlib.h>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef __GNUC__
#define _LIBCPP_UNREACHABLE() __builtin_unreachable()
#else
#define _LIBCPP_UNREACHABLE() _VSTD::abort()
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

using ::size_t;
_LIBCPP_USING_IF_EXISTS(::div_t);
_LIBCPP_USING_IF_EXISTS(::ldiv_t);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::lldiv_t);
#endif // _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::atof);
_LIBCPP_USING_IF_EXISTS(::atoi);
_LIBCPP_USING_IF_EXISTS(::atol);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::atoll);
#endif // _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::strtod);
_LIBCPP_USING_IF_EXISTS(::strtof);
_LIBCPP_USING_IF_EXISTS(::strtold);
_LIBCPP_USING_IF_EXISTS(::strtol);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::strtoll);
#endif // _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::strtoul);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::strtoull);
#endif // _LIBCPP_HAS_NO_LONG_LONG

#if !defined(_LIBCPP_DRIVERKIT_LIBC)

_LIBCPP_USING_IF_EXISTS(::rand);
_LIBCPP_USING_IF_EXISTS(::srand);
_LIBCPP_USING_IF_EXISTS(::calloc);
_LIBCPP_USING_IF_EXISTS(::free);
_LIBCPP_USING_IF_EXISTS(::malloc);
_LIBCPP_USING_IF_EXISTS(::realloc);

#endif // _LIBCPP_DRIVERKIT_LIBC

_LIBCPP_USING_IF_EXISTS(::abort);

#if !defined(_LIBCPP_DRIVERKIT_LIBC)

_LIBCPP_USING_IF_EXISTS(::atexit);
_LIBCPP_USING_IF_EXISTS(::exit);
_LIBCPP_USING_IF_EXISTS(::_Exit);
#ifndef _LIBCPP_WINDOWS_STORE_APP
_LIBCPP_USING_IF_EXISTS(::getenv);
_LIBCPP_USING_IF_EXISTS(::system);
#endif

#endif // _LIBCPP_DRIVERKIT_LIBC

_LIBCPP_USING_IF_EXISTS(::bsearch);
_LIBCPP_USING_IF_EXISTS(::qsort);
_LIBCPP_USING_IF_EXISTS(::abs);
_LIBCPP_USING_IF_EXISTS(::labs);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::llabs);
#endif // _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::div);
_LIBCPP_USING_IF_EXISTS(::ldiv);
#ifndef _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::lldiv);
#endif // _LIBCPP_HAS_NO_LONG_LONG
_LIBCPP_USING_IF_EXISTS(::mblen);
_LIBCPP_USING_IF_EXISTS(::mbtowc);
_LIBCPP_USING_IF_EXISTS(::wctomb);
_LIBCPP_USING_IF_EXISTS(::mbstowcs);
_LIBCPP_USING_IF_EXISTS(::wcstombs);

#if !defined(_LIBCPP_DRIVERKIT_LIBC)

#if !defined(_LIBCPP_CXX03_LANG) && defined(_LIBCPP_HAS_QUICK_EXIT)
_LIBCPP_USING_IF_EXISTS(::at_quick_exit);
_LIBCPP_USING_IF_EXISTS(::quick_exit);
#endif
#if _LIBCPP_STD_VER > 14 && defined(_LIBCPP_HAS_ALIGNED_ALLOC)
_LIBCPP_USING_IF_EXISTS(::aligned_alloc);
#endif

#endif // _LIBCPP_DRIVERKIT_LIBC

_LIBCPP_END_NAMESPACE_STD

#endif  // _LIBCPP_CSTDLIB
